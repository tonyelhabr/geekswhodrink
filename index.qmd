---
title: 'Geeks Who Drink'
format: dashboard
orientation: columns
theme: [flatly, assets/styles.scss]
---

```{r}
#| label: data-load
#| include: false
#| eval: true

## References:
## https://github.com/mine-cetinkaya-rundel/ld-dashboard/blob/main/dashboard.qmd
## https://github.com/jjallaire/waste-sites-dashboard/blob/main/dashboard.qmd
library(readr)
library(dplyr)
library(leaflet)
library(htmltools)
library(reactable)

REPO <- 'tonyelhabr/geekswhodrink'
GITHUB_PAT <- Sys.getenv('GEEKS_WHO_DRINK_TOKEN')
read_release <- function(name, ext, f, tag = 'data') {
  piggyback::pb_read(
    file = sprintf('%s.%s', name, ext),
    repo = REPO,
    tag = tag,
    read_function = f,
    .token = GITHUB_PAT
  )
}

read_release_csv <- function(name, ...) {
  read_release(
    name = name,
    ext = 'csv',
    f = function(path) { readr::read_csv(path, show_col_types = FALSE) },
    ...
  )
}

venues <- read_release_csv(
  name = 'dasbhoard-venues',
  tag = 'data'
)
```

# Venue Locations

## Column {width="60%"}

```{r}
#| label: map
#| title: Quiz venue locations
#| padding: 0
## https://github.com/jjallaire/waste-sites-dashboard/blob/main/dashboard.qmd
leaflet::leaflet() |> 
  ## CartoDB.Positron seems to be pretty popular among tutorials, but I personally like
  ##   this one a bit more
  leaflet::addProviderTiles('CartoDB.Voyager') |> 
  ## US
  leaflet::fitBounds(
    lng1 = -127.44,
    lat1 = 24.05,
    lng2 = -65.30,
    lat2 = 50.35
  ) |>
  ## Austin
  # leaflet::fitBounds(
  #   lng1 = -97.95,
  #   lat1 = 30.12, 
  #   lng2 = -97.56, 
  #   lat2 = 30.52
  # ) |> 
  leaflet::addMarkers(
    lng = venues$lon,
    lat = venues$lat,
    label = venues$name,
    popup = venues$label,
    labelOptions = leaflet::labelOptions(
      style = list('font-weight' = 'normal'),
      direction = 'auto'
    )
  )
```

## Column {width="40%"}

```{r}
#| label: table
#| title: Quiz venues
venues |> 
  dplyr::select(
    state,
    city,
    name,
    address_line_1,
    venue_id
  ) |> 
  reactable::reactable(
    columns = list(
      state = reactable::colDef(name = 'State'),
      city = reactable::colDef(name = 'City'),
      name = reactable::colDef(
        html = TRUE,
        name = 'Name',
        cell = function(value, index) {
          venues$html_name[index]
        }),
      address_line_1 = reactable::colDef(name = 'Address'),
      venue_id = reactable::colDef(
        html = TRUE,
        name = 'Venue ID',
        cell = function(value, index) {
          venues$html_venue_id[index]
        }
      )
    ),
    defaultPageSize = 10,
    sortable = TRUE,
    filterable = TRUE,
    defaultSorted = c('state', 'city', 'name'),
    defaultSortOrder = 'asc',
    pagination = TRUE
  )
```

# Venue Results

::: callout-caution
TODO
:::
