---
title: 'Geeks Who Drink'
format: dashboard
orientation: columns
theme: [flatly, assets/styles.scss]
---

```{r}
#| label: data-load
#| include: false
#| eval: true

## References:
## https://github.com/mine-cetinkaya-rundel/ld-dashboard/blob/main/dashboard.qmd
## https://github.com/jjallaire/waste-sites-dashboard/blob/main/dashboard.qmd
library(readr)
library(dplyr)
library(leaflet)
library(purrr)
library(stringr)
library(htmltools)
library(reactable)

REPO <- 'tonyelhabr/geekswhodrink'
read_geekswhodrink_release <- function(name, ext, f, tag = 'data') {
  url <- sprintf('https://github.com/%s/releases/download/%s/%s.%s', REPO, tag, name, ext)
  f(url)
}

read_geekswhodrink_release_csv <- function(name, ...) {
  read_geekswhodrink_release(
    name = name,
    ext = 'csv',
    f = function(path) { readr::read_csv(path, show_col_types = FALSE) },
    ...
  )
}

## pull ----
raw_venue_info <- read_geekswhodrink_release_csv(
  name = 'venue-info',
  tag = 'data'
)

raw_venues <- read_geekswhodrink_release_csv(
  name = 'venues',
  tag = 'data'
)

## combine ----
convert_10_digit_zip_to_5_digit_zip <- function(x) {
  stringr::str_remove(x, '-[0-9]{4}$')
}

str_replace_address <- function(x, i) {
  stringr::str_replace(x, paste0('(^.*)', '\\,\\s([A-Z]{2})\\s([0-9]+$)'), paste0('\\', i))
}

venue_info <- raw_venue_info |> 
  dplyr::transmute(
    venue_id,
    venue_address_line_1,
    venue_address_line_2  = convert_10_digit_zip_to_5_digit_zip(venue_address_line_2),
    ## TODO: Fix 2336767042 and 1260079721
    venue_address = dplyr::na_if(venue_address, 'NA\nNA'),
    venue_link,
    venue_info_updated_at = updated_at,
  )

venues <- raw_venues |> 
  dplyr::mutate(
    address = convert_10_digit_zip_to_5_digit_zip(address)
  ) |> 
  dplyr::left_join(
    venue_info,
    by = dplyr::join_by(venue_id)
  ) |> 
  dplyr::transmute(
    venue_id,
    name,
    html_name = sprintf(
      '%s%s%s', 
      ifelse(
        !is.na(venue_link),
        sprintf("<a href='%s' target='_blank'>", venue_link),
        ''
      ),
      name,
      ifelse(
        !is.na(venue_link),
        '</a>',
        ''
      )
    ),
    ## venue only is in the venue-info release if it has results
    has_results = !is.na(venue_info_updated_at),
    venue_link,
    full_address = dplyr::coalesce(
      venue_address,
      address
    ),
    address_line_1 = dplyr::coalesce(
      venue_address_line_1, 
      stringr::str_remove(address, ADDRESS_SUFFIX_REGEX)
    ),
    # city = dplyr::coalesce(
    #   str_replace_address(venue_address_line_2, 1),
    #   str_replace_address(address, 1)
    # ),
    city = str_replace_address(venue_address_line_2, 1),
    state = dplyr::coalesce(
      str_replace_address(venue_address_line_2, 2),
      str_replace_address(address, 2)
    ),
    zip = dplyr::coalesce(
      str_replace_address(venue_address_line_2, 3),
      str_replace_address(full_address, 3)
    ),
    lat,
    lon
  ) |> 
  dplyr::arrange(state, name)

# quiz_results <- read_geekswhodrink_release_csv(
#   name = 'quiz-results',
#   tag = 'data'
# )
```

## Column {width="60%"}

```{r}
#| label: map
#| title: Quiz venue locations
#| padding: 0
## https://github.com/jjallaire/waste-sites-dashboard/blob/main/dashboard.qmd
leaflet::leaflet() |> 
  ##  CartoDB.Positron seems to be pretty popular among tutorials, but I personally like
  ##  this one a bit more
  leaflet::addProviderTiles('CartoDB.Voyager') |> 
  ## US
  leaflet::fitBounds(
    lng1 = -127.44,
    lat1 = 24.05,
    lng2 = -65.30,
    lat2 = 50.35
  ) |>
  ## Austin
  # leaflet::fitBounds(
  #   lng1 = -97.95,
  #   lat1 = 30.12, 
  #   lng2 = -97.56, 
  #   lat2 = 30.52
  # ) |> 
  leaflet::addMarkers(
    lng = venues$lon,
    lat = venues$lat,
    label = sprintf(
      '<strong>%s%s%s</strong><br/>%s<br/>%s, %s',
      ifelse(
        !is.na(venues$venue_link),
        sprintf("<a href='%s' target='_blank'>", venues$venue_link),
        ''
      ),
      venues$name,
      ifelse(
        !is.na(venues$venue_link),
        '</a>',
        ''
      ),
      venues$address_line_1,
      venues$state,
      venues$zip
    ) |>
      purrr::map(htmltools::HTML),
    labelOptions = leaflet::labelOptions(
      style = list('font-weight' = 'normal'),
      direction = 'auto'
    )
  )
```

## Column {width="40%"}

```{r}
#| label: table
#| title: Quiz venues
venues |> 
  dplyr::select(
    state,
    city,
    name,
    address_line_1,
    venue_id
  ) |> 
  reactable::reactable(
    columns = list(
      state = reactable::colDef(name = 'State'),
      city = reactable::colDef(name = 'City'),
      name = reactable::colDef(
        html = TRUE,
        name = 'Name',
        cell = function(value, index) {
          venues$html_name[index]
        }),
      address_line_1 = reactable::colDef(name = 'Address'),
      venue_id = reactable::colDef(name = 'Venue ID')
    ),
    defaultPageSize = 10,
    sortable = TRUE,
    filterable = TRUE,
    defaultSorted = c('state', 'city', 'name'),
    defaultSortOrder = 'asc',
    pagination = TRUE
  )
```
